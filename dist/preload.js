// Rivercord 14672b59
// Standalone: false
// Platform: win32
// Updater Disabled: false
"use strict";

// src/shared/debounce.ts
function debounce(func, delay = 300) {
  let timeout;
  return function(...args) {
    clearTimeout(timeout);
    timeout = setTimeout(() => {
      func(...args);
    }, delay);
  };
}

// src/preload.ts
var import_electron2 = require("electron");
var import_fs = require("fs");
var import_path = require("path");

// src/RivercordNative.ts
var import_electron = require("electron");
function invoke(event, ...args) {
  return import_electron.ipcRenderer.invoke(event, ...args);
}
function sendSync(event, ...args) {
  return import_electron.ipcRenderer.sendSync(event, ...args);
}
var PluginHelpers = {};
var pluginIpcMap = sendSync("RivercordGetPluginIpcMethodMap" /* GET_PLUGIN_IPC_METHOD_MAP */);
for (const [plugin, methods] of Object.entries(pluginIpcMap)) {
  const map = PluginHelpers[plugin] = {};
  for (const [methodName, method] of Object.entries(methods)) {
    map[methodName] = (...args) => invoke(method, ...args);
  }
}
var RivercordNative_default = {
  themes: {
    uploadTheme: (fileName, fileData) => invoke("RivercordUploadTheme" /* UPLOAD_THEME */, fileName, fileData),
    deleteTheme: (fileName) => invoke("RivercordDeleteTheme" /* DELETE_THEME */, fileName),
    getThemesDir: () => invoke("RivercordGetThemesDir" /* GET_THEMES_DIR */),
    getThemesList: () => invoke("RivercordGetThemesList" /* GET_THEMES_LIST */),
    getThemeData: (fileName) => invoke("RivercordGetThemeData" /* GET_THEME_DATA */, fileName),
    getSystemValues: () => invoke("RivercordGetThemeSystemValues" /* GET_THEME_SYSTEM_VALUES */)
  },
  updater: {
    getUpdates: () => invoke("RivercordGetUpdates" /* GET_UPDATES */),
    update: () => invoke("RivercordUpdate" /* UPDATE */),
    rebuild: () => invoke("RivercordBuild" /* BUILD */),
    getRepo: () => invoke("RivercordGetRepo" /* GET_REPO */)
  },
  settings: {
    get: () => sendSync("RivercordGetSettings" /* GET_SETTINGS */),
    set: (settings, pathToNotify) => invoke("RivercordSetSettings" /* SET_SETTINGS */, settings, pathToNotify),
    getSettingsDir: () => invoke("RivercordGetSettingsDir" /* GET_SETTINGS_DIR */)
  },
  quickCss: {
    get: () => invoke("RivercordGetQuickCss" /* GET_QUICK_CSS */),
    set: (css) => invoke("RivercordSetQuickCss" /* SET_QUICK_CSS */, css),
    addChangeListener(cb) {
      import_electron.ipcRenderer.on("RivercordQuickCssUpdate" /* QUICK_CSS_UPDATE */, (_, css) => cb(css));
    },
    addThemeChangeListener(cb) {
      import_electron.ipcRenderer.on("RivercordThemeUpdate" /* THEME_UPDATE */, () => cb());
    },
    openFile: () => invoke("RivercordOpenQuickCss" /* OPEN_QUICKCSS */),
    openEditor: () => invoke("RivercordOpenMonacoEditor" /* OPEN_MONACO_EDITOR */)
  },
  native: {
    getVersions: () => process.versions,
    openExternal: (url) => invoke("RivercordOpenExternal" /* OPEN_EXTERNAL */, url)
  },
  pluginHelpers: PluginHelpers
};

// src/preload.ts
import_electron2.contextBridge.exposeInMainWorld("RivercordNative", RivercordNative_default);
if (location.protocol !== "data:") {
  const rendererCss = (0, import_path.join)(__dirname, false ? "rivercordDesktopRenderer.css" : "renderer.css");
  const style = document.createElement("style");
  style.id = "rivercord-css-core";
  style.textContent = (0, import_fs.readFileSync)(rendererCss, "utf-8");
  if (document.readyState === "complete") {
    document.documentElement.appendChild(style);
  } else {
    document.addEventListener("DOMContentLoaded", () => document.documentElement.appendChild(style), {
      once: true
    });
  }
  if (true) {
    (0, import_fs.watch)(rendererCss, { persistent: false }, () => {
      document.getElementById("rivercord-css-core").textContent = (0, import_fs.readFileSync)(rendererCss, "utf-8");
    });
  }
  if (true) {
    import_electron2.webFrame.executeJavaScript((0, import_fs.readFileSync)((0, import_path.join)(__dirname, "renderer.js"), "utf-8"));
    require(process.env.DISCORD_PRELOAD);
  }
} else {
  import_electron2.contextBridge.exposeInMainWorld("setCss", debounce(RivercordNative_default.quickCss.set));
  import_electron2.contextBridge.exposeInMainWorld("getCurrentCss", RivercordNative_default.quickCss.get);
  import_electron2.contextBridge.exposeInMainWorld("getTheme", () => "vs-dark");
}
//# sourceURL=RivercordPreload

//# sourceMappingURL=data:application/json;base64,
